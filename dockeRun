#!/bin/sh

# =================
# Author: PastLeo
# Email: chgu82837@gmail.com
# Date: 2014/12/27
# =================

binName="dockeRun"
dockerRunCmdPrefix="dockerRun:"
dockerRunLinkPrefix="dockerRunLink:"
dockerRunTemplatePosfix="-tmpl"
dockerRunImageNamePrefix="dr-"
dockerRunBin=$(readlink $0 || echo $(cd $(dirname $0) && pwd)/$(basename $0))
dockerRunHome=$(dirname $dockerRunBin)

# echo "dockerRunBin = $dockerRunBin"
# echo "dockerRunHome = $dockerRunHome"
# exit 0

get_dockeRun_path() {
    dockerPath="$dockerRunHome/$1"

    if [ -f $dockerPath ]; then
        case $(uname -s) in
            Darwin|*BSD*)
            dockerPath=$(cd $dockerRunHome/$(grep -E -m 1 "^ *$dockerRunLinkPrefix" $dockerPath | sed -E "s/^ *#? *$dockerRunLinkPrefix +//g" | sed -E "s/ +//g") && pwd)
            ;;
            Linux)
            dockerPath=$(cd $dockerRunHome/$(grep -E -m 1 "^ *$dockerRunLinkPrefix" $dockerPath | sed -E "s/^ *#? *$dockerRunLinkPrefix +//g") && pwd)
            ;;
            *)
            echo "Unknown OSTYPE: $OSTYPE"
            exit 255
        esac
    fi
    echo $dockerPath
}

list_availible_configs() {
    cd $dockerRunHome
    echo "Listing possible dockeRun settings ..."
    echo "==============================================="
    ls | grep -v -E "Dockerfile|Icon|.+.md|.+${dockerRunTemplatePosfix}|LICENSE|$binName"
}

list_availible_tmpls() {
    cd $dockerRunHome
    echo "Listing possible dockeRun setting templates ..."
    echo "==============================================="
    ls | grep -E ".+${dockerRunTemplatePosfix}" | sed "s/${dockerRunTemplatePosfix}//"
}

show_help() {
    echo ""
    echo "$binName - dockerRunner exec by $0"
    echo "==============================================="
    echo "A small docker client helper to run container with saved options in the Dockerfile"
    echo "Usage:"
    echo "    $binName [--rebuild|-r] <imageName_or_projectPath> [command] [args...] # build and run the container"
    echo "    $binName --template|-t [templateName] [projectPath] # place the Dockerfile template to the projectPath, or list templates"
    echo "    $binName --list|-l # list availible configs"
    echo "    $binName --help|-h # show this help message"
    echo "    $binName --install [install-destination-dir] # install to normal unix system"
    echo "    $binName --install-b2d [default-dockeRun-imageName] # install to boot2docker system"
    echo ""
    list_availible_configs
    echo ""
    list_availible_tmpls
    echo ""
}

case "$1" in
"--rebuild"|"-r")
    echo "[rebuilding mode]"
    rebuild_mod=1
    shift
    ;;
"--template"|"-t")
    if [ $2 ]; then
        dockerPath="$(get_dockeRun_path $2${dockerRunTemplatePosfix})"
        if [ $3 ]; then
            targetPath=$3
        else
            targetPath="./"
        fi

        # echo "cp -Rvi $dockerPath/* $targetPath"
        # exit

        cp -Rvi $dockerPath/* $targetPath
        echo "Done. The template is placed to $targetPath"
        echo ""
        echo "Use \"$binName $targetPath\" to start working env for your project"
    else
        list_availible_tmpls
    fi
    exit 0
    ;;
"--list"|"-l")
    list_availible_configs
    exit 0
    ;;
"--help"|"-h")
    show_help
    exit 0
    ;;
"--install")
    if [ $2 ]; then
        installDir="$2"
    else
        case "$PATH" in
        */usr/local/bin*)
            installDir="/usr/local/bin"
            ;;
        */usr/bin*)
            installDir="/usr/bin"
            ;;
        */bin*)
            installDir="/bin"
            ;;
        esac
    fi

    echo "installing $binName for the system ..."
    echo "$installDir/$binName"
    if [ -h "$installDir/$binName" -o -h "$installDir/$binName" ]; then
        echo "$installDir/$binName exists, removing ..."
        rm -f $installDir/$binName
    fi
    echo "linking the executable into $installDir ..."
    ln -s $dockerRunBin $installDir/$binName
    chmod ugo+x $dockerRunBin
    exit 0
    ;;
"--install-b2d")
    boot2dockerBootscript="/var/lib/boot2docker/bootlocal.sh"
    dockerAshrc="/home/docker/.ashrc"

    echo "installing $binName for boot2docker system"
    echo "building $boot2dockerBootscript ..."
    echo "#!/bin/sh" > $boot2dockerBootscript
    echo "" >> $boot2dockerBootscript
    echo "$dockerRunBin --install" >> $boot2dockerBootscript
    echo "" >> $boot2dockerBootscript

    if [ $2 ]; then
        echo "echo '' >> $dockerAshrc" >> $boot2dockerBootscript
        echo "echo \"$binName $2\" >> $dockerAshrc" >> $boot2dockerBootscript
        echo "echo '' >> $dockerAshrc" >> $boot2dockerBootscript
        echo "" >> $boot2dockerBootscript

        echo "" >> $dockerAshrc
        echo "$binName $2" >> $dockerAshrc
        echo "" >> $dockerAshrc
    fi

    echo "chmoding $boot2dockerBootscript ..."
    chmod ugo+x $boot2dockerBootscript
    echo "boot2dockerBootscript OK!"
    $0 "--install"
    exit 0
    ;;
esac

if [ $# -lt 1 ]; then
    show_help
    exit 255
fi

dockerBin="$(which docker)"
if ! [ $dockerBin ]; then
    echo "This docker binary not found! Please install it to run this script!"
    exit 255
fi

# echo "dockerBin = $dockerBin"

cd $1 2> /dev/null
if [ $? -eq 0 ]; then
    echo "use as dockerPath"
    imageName=$(echo $(cd $1 && pwd) | sed -E 's/([^\/])[^\/]*\//\1-/g' | sed -E 's/\///g')
    dockerPath="$1"
else
    echo "use as imageName"
    imageName="$dockerRunImageNamePrefix$1"
    dockerPath="$(get_dockeRun_path $1)"
fi

imageName=$(echo $imageName | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9._\-]//g')

# echo "imageName = $imageName"
# echo "dockerPath = $dockerPath"
# exit

if ! [ -f "$dockerPath/Dockerfile" ]; then
    echo ""
    echo "Error:"
    echo "$dockerPath does not contains a Dockerfile or not exist!"
    echo ""

    exit 255
fi

case $(uname -s) in
    Darwin|*BSD*)
    runOpt=$(grep -E -m 1 "^ *# *$dockerRunCmdPrefix" $dockerPath/Dockerfile | sed -E "s/^ *# *$dockerRunCmdPrefix +//g" | sed -E "s/[^ -~]+/ /g")
    ;;
    Linux)
    runOpt=$(grep -E -m 1 "^ *# *$dockerRunCmdPrefix" $dockerPath/Dockerfile | sed -r "s/^ *# *$dockerRunCmdPrefix +//g")
    ;;
    *)
    echo "Unknown OSTYPE: $OSTYPE"
    exit 255
esac

# echo "runOpt = $runOpt"
# exit 0

# echo "$dockerBin images $imageName | grep $imageName &> /dev/null"
# exit

if [ $rebuild_mod ]; then
    echo "removing image $imageName ..."
    $dockerBin rmi -f $imageName
fi

if [ ! "$($dockerBin images $imageName | grep $imageName 2> /dev/null)" ]; then
    echo "docker image $imageName not exist, building..."

    # echo "$dockerBin build -t $imageName $dockerPath"
    $dockerBin build -t $imageName $dockerPath

    if [ $? -ne 0 ]; then
        echo ""
        echo "It seems build failed, aborting..."
        echo ""
        exit 255
    fi
fi

runOpt=$(eval "echo $runOpt")
# echo "runOpt = $runOpt"

shift

echo "Starting to run docker..."
echo ">> $dockerBin run $runOpt $imageName $@"
# exit
$dockerBin run $runOpt $imageName $@
